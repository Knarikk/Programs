/*Given a sorted array of distinct integers and a target value, return the index
if the target is found. If not, return the index where it would be if it were
inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
Example 4:

Input: nums = [1,3,5,6], target = 0
Output: 0
Example 5:

Input: nums = [1], target = 0
Output: 0
*/

#include <iostream>
#include<vector>
using namespace std;

int binarySearchHelper(const std::vector<int>& a, int l, int r, int x)
{
    std::cout << "Search " << l << " " << r << std::endl;
    if (l > r)
    {
        return l;
    }
    int middle=(r+l)/2;
    if(a[middle]==x)
        return middle;
    else if(a[middle]>x)
         return binarySearchHelper(a,l,middle-1,x);
    else
         return binarySearchHelper(a,middle+1,r,x);
}

int binarySearch(const std::vector<int>& a, int x)
{
    return binarySearchHelper(a, 0, a.size() - 1, x);
}

/*int searchInsert(vector<int>& nums, int target)
{
   
    for ( unsigned  i = 0; i < nums.size(); i++)
    {
        if (target == nums[i])
        {
            return i;
        }

        else if (target != nums[i])
        {
            if (target > nums[i] && target < nums[i + 1])

            {
                return i + 1;
            }

            if (target < nums[0])
            {
                return 0;
            }
            if (target > nums[nums.size()-1])
            {
                return nums.size() ;
            }
        }
    }
    
}*/
int main()
{
    vector<int>nums = { 1,3,5,6 };
    cout << binarySearch(nums, 7);

}
